package FinalProject;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

public class CheckerBoard extends Canvas implements MouseListener {
	
	private int mouseX, mouseY;
	private boolean mouseClicked, gameOver;
	private int mouseButton, prevMouseButton;
	private Board board;
	private String turn;
	private int redCap;
	private int blueCap;
	
	private ArrayList<CheckerPiece> redPieces;
	private ArrayList<CheckerPiece> bluePieces;
	
	private final static int WIDTH=50;
	private final static int HEIGHT=50;
	private final static int SCALE = 50;
	private final static int BOARDSIZE=8;
	
	public CheckerBoard(){
		mouseClicked = false;
		mouseX = mouseY = 0;
		mouseButton = 0;
		prevMouseButton = -1;
		
		addMouseListener(this);
		setBackground(Color.WHITE);
		
		board = new Board(BOARDSIZE,BOARDSIZE);
		
		redPieces = new ArrayList<CheckerPiece>();
		bluePieces = new ArrayList<CheckerPiece>();
		
		turn = "blue";
		
		int count = 0;
		for(int i = 0; i<3;i++){
			for(int j = 0; j<8;j++){
				if(i%2==1){
					if(j%2==0){
						bluePieces.add(new CheckerPiece((j+1)*50+5, (i+1)*50+5, Color.blue));
						board.setSpot(i,j, bluePieces.get(count));
						count++;
					}
				}
				else{
					if(j%2==1){
						bluePieces.add(new CheckerPiece((j+1)*50+5, (i+1)*50+5, Color.blue));
						board.setSpot(i,j, bluePieces.get(count));
						count++;
					}
				}
			}
		}
		count = 0;
		for(int i = 5; i<8;i++){
			for(int j = 0; j<8;j++){
				if(i%2==1){
					if(j%2==0){
						redPieces.add(new CheckerPiece((j+1)*50+5, (i+1)*50+5, Color.red));
						board.setSpot(i,j, redPieces.get(count));
						count++;
					}
				}
				else{
					if(j%2==1){
						redPieces.add(new CheckerPiece((j+1)*50+5, (i+1)*50+5, Color.red));
						board.setSpot(i,j, redPieces.get(count));
						count++;
					}
				}
			}
		}
	}
	
	

	@Override
	public void mouseClicked(MouseEvent e) {
		mouseClicked = true;
		mouseX=e.getX();
		mouseY=e.getY();
		mouseButton = e.getButton();
		markBoard();
		//System.out.println(mouseX);
		repaint();
	}
	
	public void paint(Graphics window){
		window.setColor(Color.white);
		window.fillRect(0,0,640,480);
		window.setFont(new Font("TAHOMA",Font.BOLD,20));
		window.setColor(Color.red);
		window.drawString("Checkers", 600,55);
		
		redCap=0;
		blueCap=0;
		
		int rcount = 0;
		int ccount = 0;
		for(int i = 0; i <BOARDSIZE;i++){
			for(int j = 0; j < BOARDSIZE; j++){
				if(rcount%2==0 && ccount%2==0){
					window.setColor(Color.white);
				}
				else if(rcount%2==0 && ccount%2==1){
					window.setColor(Color.black);
				}
				else if(rcount%2==1 && ccount%2==0){
					window.setColor(Color.BLACK);
				}
				else{
					window.setColor(Color.white);
				}
				window.fillRect((i+1)*50,(j+1)*50,WIDTH,HEIGHT);
				window.setColor(Color.black);
				window.drawRect((i+1)*50,(j+1)*50,WIDTH,HEIGHT);
				ccount++;
			}
			rcount++;
		}
		
		
		for(int i =0; i<12; i++){
			redPieces.get(i).draw(window);
			bluePieces.get(i).draw(window);
		}
	}
	
	public void markBoard()
	{
		if(mouseX>=50&&mouseX<=450&&mouseY>=50&&mouseY<=450)
		{
			int r = mouseY/50-1;
			int c = mouseX/50-1;
			CheckerPiece piece = (CheckerPiece)board.getSpot(r,c);
			boolean colored = true;
			if(mouseButton==MouseEvent.BUTTON1&&turn.equals("blue"))		//left mouse button pressed
			{
				if(piece==null){
					for(CheckerPiece p:bluePieces){
						if(p.getClicked()){
							int nr = p.getY()/50-1;
							int nc = p.getX()/50-1;
							//System.out.println(r);
							//System.out.println(c);
							if(nr-r==-2){
								if(nc-c==-2){
									if(board.getSpot(nr+1, nc+1)!=null){
										int x = p.getX();
										int y = p.getY();
										takePiece((CheckerPiece)board.getSpot(nr+1, nc+1), p);
										movePiece(x+100, y+100, r, c, nr, nc, p);
										if(!checkMove(r,c)){
											turn = "red";
										}
										redCap++;
									}
								}
								else if(nc-c==2){
									if(board.getSpot(nr+1, nc-1)!=null){
										int x = p.getX();
										int y = p.getY();
										takePiece((CheckerPiece)board.getSpot(nr+1, nc-1), p);
										movePiece(x-100, y+100, r, c, nr, nc, p);
										if(!checkMove(r,c)){
											turn = "red";
										}
										redCap++;
									}
								}
							}
							else if(nr-r==2){
								if(nc-c==-2){
									if(board.getSpot(nr-1, nc+1)!=null){
										int x = p.getX();
										int y = p.getY();
										takePiece((CheckerPiece)board.getSpot(nr-1, nc+1), p);
										movePiece(x+100, y-100, r, c, nr, nc, p);
										if(!checkMove(r,c)){
											turn = "red";
										}
										redCap++;
									}
								}
								else if(nc-c==2){
									if(board.getSpot(nr-1, nc-1)!=null){
										int x = p.getX();
										int y = p.getY();
										takePiece((CheckerPiece)board.getSpot(nr-1, nc-1), p);
										movePiece(x-100, y-100, r, c, nr, nc, p);
										if(!checkMove(r,c)){
											turn = "red";
										}
										redCap++;
									}
								}
							}
							
							if(nr-r==-1){
								if(nc-c==-1){
									int x = p.getX();
									int y = p.getY();
									movePiece(x+50, y+50, r, c, nr, nc, p);
									turn = "red";
								}
								else if(nc-c==1){
									int x = p.getX();
									int y = p.getY();
									movePiece(x-50, y+50, r, c, nr, nc, p);
									turn = "red";
								}
							}
						}
					}
				}
				else if(piece.getClicked()){
					piece.setClicked(false);
				}
				else if(!piece.getClicked()){
					
					for(CheckerPiece p:bluePieces){
						if(p.getClicked()){
							colored = false;
						}
					}
					if(colored){
						if(piece.getColorFill().equals(Color.blue)){
							piece.setClicked(true);
						}
					}
				}
			}		
			
			//if BUTTON3 was pressed and BUTTON3 was not pressed last mouse press
			if(mouseButton==MouseEvent.BUTTON3&&turn.equals("red")){
				if(piece==null){
					for(CheckerPiece p:redPieces){
						if(p.getClicked()){
							int nr = p.getY()/50-1;
							int nc = p.getX()/50-1;
							
							if(nr-r==2){
								if(nc-c==-2){
									if(board.getSpot(nr-1, nc+1)!=null){
										int x = p.getX();
										int y = p.getY();
										takePiece((CheckerPiece)board.getSpot(nr-1, nc+1), p);
										movePiece(x+100, y-100, r, c, nr, nc, p);
										if(!checkMove(r,c)){
											turn = "blue";
										}
										blueCap++;
									}
								}
								else if(nc-c==2){
									if(board.getSpot(nr-1, nc-1)!=null){
										int x = p.getX();
										int y = p.getY();
										takePiece((CheckerPiece)board.getSpot(nr-1, nc-1), p);
										movePiece(x-100, y-100, r, c, nr, nc, p);
										if(!checkMove(r,c)){
											turn = "blue";
										}
										blueCap++;
									}
								}
							}
							else if(nr-r==-2){
								if(nc-c==-2){
									if(board.getSpot(nr+1, nc+1)!=null){
										int x = p.getX();
										int y = p.getY();
										takePiece((CheckerPiece)board.getSpot(nr+1, nc+1), p);
										movePiece(x+100, y+100, r, c, nr, nc, p);
										if(!checkMove(r,c)){
											turn = "blue";
										}
										blueCap++;
									}
								}
								else if(nc-c==2){
									if(board.getSpot(nr+1, nc-1)!=null){
										int x = p.getX();
										int y = p.getY();
										takePiece((CheckerPiece)board.getSpot(nr+1, nc-1), p);
										movePiece(x-100, y+100, r, c, nr, nc, p);
										if(!checkMove(r,c)){
											turn = "blue";
										}
										blueCap++;
									}
								}
							}
							
							if(nr-r==1){
								if(nc-c==-1){
									int x = p.getX();
									int y = p.getY();
									movePiece(x+50, y-50, r, c, nr, nc, p);
									turn = "blue";
								}
								else if(nc-c==1){
									int x = p.getX();
									int y = p.getY();
									movePiece(x-50, y-50, r, c, nr, nc, p);
									turn ="blue";
								}
								
							}
						}
					}
				}
				else if(piece.getClicked()){
					piece.setClicked(false);
				}
				else if(!piece.getClicked()){
					
					for(CheckerPiece p:redPieces){
						if(p.getClicked()){
							colored = false;
						}
					}
					if(colored){
						if(piece.getColorFill().equals(Color.red)){
							piece.setClicked(true);
						}
					}
				}
			}
		}
	}
	
	public void takePiece(CheckerPiece piece, CheckerPiece p){
		if(piece.getColorFill().equals(Color.blue)&&p.getColorFill().equals(Color.red)){
			board.setSpot(piece.getY()/50-1, piece.getX()/50-1, null);
			if(blueCap< 6){
				piece.setPos(500+50*(blueCap+1), 400);
			}
			else{
				piece.setPos(500+25*(blueCap-5), 425);
			}
			piece.setHeight(25);
			piece.setWidth(25);
			piece.setTaken(true);
			
		}
		else if(piece.getColorFill().equals(Color.red)&& p.getColorFill().equals(Color.blue)){
			board.setSpot(piece.getY()/50-1, piece.getX()/50-1, null);
			if(redCap< 6){
				piece.setPos(500+50*(redCap+1), 100);
			}
			else{
				piece.setPos(500+25*(redCap-5), 125);
			}
			piece.setHeight(25);
			piece.setWidth(25);
			piece.setTaken(true);
		}
	}
	
	public void movePiece(int x, int y, int r, int c, int nr, int nc, CheckerPiece p){
		p.setX(x);
		p.setY(y);
		board.setSpot(r,c,p);
		board.setSpot(nr, nc, null);
		p.setClicked(false);
			
	}
	
	public boolean checkMove(int r, int c){
		if(r!=0 && c!=0 && r!=7 && c!= 7 && r!=1 && c!=1 && r!=6 && c!= 6){
			if((board.getSpot(r+1, c+1)!= null&& board.getSpot(r+2, c+2)==null)||
					(board.getSpot(r+1, c-1)!=null&&board.getSpot(r+2, c-2)==null)||
					(board.getSpot(r-1, c-1)!=null&&board.getSpot(r-2, c-2)==null)||
					(board.getSpot(r-1, c+1)!=null&&board.getSpot(r-2, c+2)==null)){
				return true;
			}
		}
		else if((r==0 && c==7)||(r==0 && c==6)){
			if((board.getSpot(r+1, c-1)!=null&&board.getSpot(r+2, c-2)==null)){
				return true;
			}
		}
		else if((r==7 && c==0) || (r==6 &&c==0)){
			if(board.getSpot(r-1, c+1)!=null&&board.getSpot(r-2, c+2)==null){
				return true;
			}
		}
		else if(r==0||r==1){
			if((board.getSpot(r+1, c+1)!= null&& board.getSpot(r+2, c+2)==null)||
			(board.getSpot(r+1, c-1)!=null&&board.getSpot(r+2, c-2)==null)){
				return true;
			}
		}
		else if(r==7||r==6){
			if((board.getSpot(r-1, c-1)!=null&&board.getSpot(r-2, c-2)==null)||
					(board.getSpot(r-1, c+1)!=null&&board.getSpot(r-2, c+2)==null)){
				return true;
			}
		}
		else if(c==0||c==1){
			if((board.getSpot(r+1, c+1)!= null&& board.getSpot(r+2, c+2)==null)||
					(board.getSpot(r-1, c+1)!=null&&board.getSpot(r-2, c+2)==null)){
				return true;
			}
		}
		else if(c==7||c==6){
			if((board.getSpot(r+1, c-1)!=null&&board.getSpot(r+2, c-2)==null)||
					(board.getSpot(r-1, c-1)!=null&&board.getSpot(r-2, c-2)==null)){
				return true;
			}
		}
		return false;
	}
	
	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
	}

}
